def is_safe(node, graph, color, c):
    for neighbor in graph[node]:
        if color[neighbor] == c:
            return False
    return True

def graph_coloring(graph, color, node, K, N):
    if node == N:
        return True
    
    for c in range(1, K+1):
        if is_safe(node, graph, color, c):
            color[node] = c
            if graph_coloring(graph, color, node + 1, K, N):
                return True
            color[node] = 0
    
    return False

def solve_multiple_cases(file_path):
    with open(file_path, 'r') as f:
        lines = f.readlines()

    index = 0
    T = int(lines[index])  # Number of test cases
    index += 1

    for _ in range(T):
        N, M, K = map(int, lines[index].split())
        index += 1

        graph = {i: [] for i in range(N)}
        for _ in range(M):
            u, v = map(int, lines[index].split())
            index += 1
            graph[u].append(v)
            graph[v].append(u)

        color = [0] * N
        print("\nTest Case:")
        if graph_coloring(graph, color, 0, K, N):
            print(f"Coloring Possible with {K} Colors")
            print("Color Assignment:", color)
        else:
            print(f"Coloring Not Possible with {K} Colors")

if __name__ == "__main__":
    file_path = "input.txt"
    solve_multiple_cases(file_path)


-------------------------------
input.txt file contains-
2
4 5 3
0 1
0 2
1 2
1 3
2 3
4 5 2
0 1
0 2
1 2
1 3
2 3

