import random

def generate_grid(n):
    grid = [[random.choice([0, 0, 0, 1]) for _ in range(n)] for _ in range(n)]  # 0 for free space, 1 for obstacles
    return grid

def find_valid_position(grid):
    n = len(grid)
    while True:
        x, y = random.randint(0, n-1), random.randint(0, n-1)
        if grid[x][y] == 0:
            return (x, y)

def dfs(grid, start, goal):
    n = len(grid)
    stack = [start]
    visited = set()
    parent = {}
    topological_order = []
    
    while stack:
        node = stack.pop()
        if node in visited:
            continue
        
        visited.add(node)
        topological_order.append(node)
        
        if node == goal:
            break
        
        x, y = node
        neighbors = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]
        random.shuffle(neighbors)
        
        for nx, ny in neighbors:
            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == 0 and (nx, ny) not in visited:
                stack.append((nx, ny))
                parent[(nx, ny)] = node
    
    path = []
    if goal in visited:
        current = goal
        while current != start:
            path.append(current)
            current = parent[current]
        path.append(start)
        path.reverse()
    
    return path, topological_order

def print_grid(grid, source, goal, path):
    n = len(grid)
    for i in range(n):
        for j in range(n):
            if (i, j) == source:
                print("S", end=" ")
            elif (i, j) == goal:
                print("G", end=" ")
            elif (i, j) in path:
                print(".", end=" ")
            else:
                print(grid[i][j], end=" ")
        print()

if __name__ == "__main__":
    while True:
        try:
            N = int(input("Enter grid size (between 4 and 7): "))
            if 4 <= N <= 7:
                break
            else:
                print("Invalid input. Please enter a number between 4 and 7.")
        except ValueError:
            print("Invalid input. Please enter a valid integer between 4 and 7.")
    
    grid = generate_grid(N)
    source = find_valid_position(grid)
    goal = find_valid_position(grid)
    while goal == source:
        goal = find_valid_position(grid)
    
    path, topo_order = dfs(grid, source, goal)
    
    print("Generated Grid:")
    print_grid(grid, source, goal, path)
    print("\nSource:", source)
    print("Goal:", goal)
    print("\nDFS Path:", path if path else "No path found")
    print("Topological Order:", topo_order)
