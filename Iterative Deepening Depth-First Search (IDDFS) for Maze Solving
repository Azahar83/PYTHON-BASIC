def dfs(maze, start, target, depth, max_depth, path, visited):
    if depth > max_depth:
        return False

    if start == target:
        path.append(start)
        return True

    x, y = start
    visited.add(start)
    path.append(start)

    # Directions: Up, Down, Left, Right
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]

    for dx, dy in directions:
        nx, ny = x + dx, y + dy
        if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] == 0 and (nx, ny) not in visited:
            if dfs(maze, (nx, ny), target, depth + 1, max_depth, path, visited):
                return True

    path.pop()
    visited.remove(start)
    return False

def iddfs(maze, start, target, max_depth):
    for depth in range(1, max_depth + 1):
        visited = set()
        path = []
        if dfs(maze, start, target, 0, depth, path, visited):
            print(f"Path found at depth {depth} using IDDFS")
            print(f"Traversal Order: {path}")
            return
    print(f"Path not found at max depth {max_depth} using IDDFS")

def run_test_cases():
    test_cases = [
        {
            "maze": [
                [0, 0, 1, 0],
                [1, 0, 1, 0],
                [0, 0, 0, 0],
                [1, 1, 0, 1]
            ],
            "start": (0, 0),
            "target": (2, 3),
            "max_depth": 6
        },
        {
            "maze": [
                [0, 1, 0],
                [0, 1, 0],
                [0, 1, 0]
            ],
            "start": (0, 0),
            "target": (2, 2),
            "max_depth": 6
        }
    ]

    for i, case in enumerate(test_cases, 1):
        print(f"\nCase #{i} Input:")
        for row in case["maze"]:
            print(row)
        print(f"Start: {case['start']}, Target: {case['target']}")

        print(f"\nCase #{i} Output:")
        iddfs(case["maze"], case["start"], case["target"], case["max_depth"])

if __name__ == "__main__":
    run_test_cases()
